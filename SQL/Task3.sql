CREATE OR REPLACE PACKAGE XXBCM_MIGRATION_PKG IS

  PROCEDURE MIGRATE_DATA;

END XXBCM_MIGRATION_PKG;
/


CREATE OR REPLACE PACKAGE BODY XXBCM_MIGRATION_PKG IS

  PROCEDURE MIGRATE_DATA IS
  BEGIN
    -- Create a cursor to retrieve data from XXBCM_ORDER_MGT
    FOR c IN (SELECT * FROM XXBCM_ORDER_MGT) LOOP

      -- Insert the order data into the XXBCM_ORDERS table
      INSERT INTO XXBCM_ORDERS (ORDER_REFERENCE, ORDER_DATE, SUPPLIER_NAME, TOTAL_AMOUNT, DESCRIPTION, STATUS)
      VALUES (SUBSTR(c.ORDER_REF, 3), TO_DATE(c.ORDER_DATE, 'DD-MON-YYYY'), INITCAP(c.SUPPLIER_NAME), TO_NUMBER(REPLACE(c.ORDER_TOTAL_AMOUNT, ',', '')), c.ORDER_DESCRIPTION, c.ORDER_STATUS);

      -- Insert the order line data into the XXBCM_ORDER_LINES table
      INSERT INTO XXBCM_ORDER_LINES (ORDER_REFERENCE, LINE_AMOUNT)
      VALUES (SUBSTR(c.ORDER_REF, 3), TO_NUMBER(REPLACE(c.ORDER_LINE_AMOUNT, ',', '')));

      -- Insert the invoice data into the XXBCM_INVOICES table
      IF c.INVOICE_REFERENCE IS NOT NULL THEN
        INSERT INTO XXBCM_INVOICES (INVOICE_REFERENCE, INVOICE_DATE, INVOICE_STATUS, HOLD_REASON, AMOUNT, DESCRIPTION, ORDER_REFERENCE)
        VALUES (c.INVOICE_REFERENCE, TO_DATE(c.INVOICE_DATE, 'DD-MON-YYYY'), c.INVOICE_STATUS, c.INVOICE_HOLD_REASON, TO_NUMBER(REPLACE(c.INVOICE_AMOUNT, ',', '')), c.INVOICE_DESCRIPTION, SUBSTR(c.ORDER_REF, 3));
      END IF;

    END LOOP;
  END MIGRATE_DATA;

END XXBCM_MIGRATION_PKG;
/


BEGIN
  XXBCM_MIGRATION_PKG.MIGRATE_DATA;
END;